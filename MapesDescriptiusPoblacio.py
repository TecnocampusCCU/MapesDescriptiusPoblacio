# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MapesDescriptiusPoblacio
                                 A QGIS plugin
 MapesDescriptiusPoblacio
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-11-15
        git sha              : $Format:%H$
        copyright            : (C) 2018 by CCU
        email                : jlopez@tecnocampus.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from os.path import expanduser
from PyQt5 import QtCore
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import QAction,QMessageBox,QTableWidgetItem,QApplication,QSizePolicy,QGridLayout,QDialogButtonBox,QFileDialog,QDockWidget,QProgressBar,QInputDialog,QLineEdit,QColorDialog,QToolBar,QWidget
from qgis.core import QgsMapLayer
from qgis.core import QgsDataSourceUri
from qgis.core import QgsVectorLayer
from qgis.core import QgsVectorFileWriter
from qgis.core import QgsGraduatedSymbolRenderer
from qgis.core import QgsCategorizedSymbolRenderer
from qgis.core import QgsGradientColorRamp
from qgis.core import QgsProject
from qgis.core import QgsRendererRange
from qgis.core import QgsSymbol
from qgis.core import QgsFillSymbol
from qgis.core import QgsLineSymbol
from qgis.core import QgsSymbolLayerRegistry
from qgis.core import QgsRandomColorRamp
from qgis.core import QgsRendererRangeLabelFormat
from qgis.core import QgsCoordinateReferenceSystem
from qgis.core import QgsProject
from qgis.core import QgsLayerTreeLayer
from qgis.core import QgsRenderContext
from qgis.core import QgsPalLayerSettings
from qgis.core import QgsTextFormat
from qgis.core import QgsTextBufferSettings
from qgis.core import QgsVectorLayerSimpleLabeling
from qgis.core import QgsProcessingFeedback, Qgis
from qgis.core import QgsVectorLayerExporter
from qgis.core import QgsWkbTypes
from qgis.gui import QgsMessageBar,QgsTabWidget
import processing   # es pot importar utilitzant from qgis import processing, pero això només funciona en versions de QGIS posteriors a la 3.10 (com a mínim segons hem pogut comprovar)
import psycopg2
import unicodedata
import datetime
import time
from qgis.utils import iface
from PyQt5.QtSql import *
import qgis.utils
import collections
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .MapesDescriptiusPoblacio_dialog import MapesDescriptiusPoblacioDialog
import os.path
from math import sqrt
#from macpath import curdir
import csv

"""
Variables globals per a la connexio
i per guardar el color dels botons
"""
micolor=None
micolorTag=None
nomBD1=""
contra1=""
host1=""
port1=""
usuari1=""
schema=""
entitat_poi=""
Fitxer=""
Path_Inicial=expanduser("~")
cur=None
conn=None
progress=None
Versio_modul="V_Q3.240517"
geometria=""
connexioFeta=False
QEstudis=None
Llista_Metodes=["ILLES","PARCELES","SECCIONS","BARRIS","DISTRICTES POSTALS","DISTRICTES INE","SECTORS"]
#Llista_Camps_Metodes=["ILLES","parcel","Seccions","Barris","DistrictesPostals","Districtes","Sectors"]
#Llista_Camps_Metodes=[f"zone{Fitxer}",f"parcel_temp{Fitxer}","seccions","barris","districtes_postals","districtes","sectors"]
Llista_Camps_Metodes=[]
TEMPORARY_PATH=""
versio_db = ""

class MapesDescriptiusPoblacio:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MapesDescriptiusPoblacio_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        '''
        Connexio dels botons amb les funcions que han de realitzar
        '''
                
        self.dlg = MapesDescriptiusPoblacioDialog()
        self.dlg.Tots_els_habitants.toggled.connect(self.on_click_Tots_habitants)
        self.dlg.Cmb_Metode.currentIndexChanged.connect(self.on_Change_Metode)
        self.dlg.Cmb_Calcul.currentIndexChanged.connect(self.on_Change_Calcul)
        self.dlg.comboLeyenda.currentIndexChanged.connect(self.on_Change_ComboLeyenda)
        self.dlg.lbl_EDAT.clicked.connect(self.on_click_lbl_EDAT)
        self.dlg.lbl_GENERE.clicked.connect(self.on_click_lbl_GENERE)
        self.dlg.lbl_ESTUDIS.clicked.connect(self.on_click_lbl_ESTUDIS)
        self.dlg.lbl_ORIGEN.clicked.connect(self.on_click_lbl_ORIGEN)
        self.dlg.lbl_NACIONALITAT.clicked.connect(self.on_click_lbl_NACIONALITAT)
        self.dlg.btoSortir.clicked.connect(self.on_click_Sortir)
        self.dlg.btoHome.toggled.connect(self.on_click_MarcarBotoHome)
        self.dlg.btoDona.toggled.connect(self.on_click_MarcarBotoDona)
        self.dlg.btoEDAT.toggled.connect(self.on_click_MarcarBotoEDAT)
        self.dlg.btoGENERE.toggled.connect(self.on_click_MarcarBotoGENERE)
        self.dlg.btoESTUDIS.toggled.connect(self.on_click_MarcarBotoESTUDIS)
        self.dlg.btoORIGEN.toggled.connect(self.on_click_MarcarBotoORIGEN)
        self.dlg.btoNACIONALITAT.toggled.connect(self.on_click_MarcarBotoNACIONALITAT)
        self.dlg.comboConnexions.currentIndexChanged.connect(self.on_Change_ComboConn)
        self.dlg.btoData.toggled.connect(self.on_click_btoData)
        self.dlg.btoPais.toggled.connect(self.on_click_btoPais)
        self.dlg.btoPais_3.toggled.connect(self.on_click_btoPais2)
        self.dlg.btoZones.toggled.connect(self.on_click_btoZones)
        self.dlg.btoZones_3.toggled.connect(self.on_click_btoZones2)
        self.dlg.btoCrearTaula.clicked.connect(self.on_click_crearTaula)
        self.dlg.color.clicked.connect(self.on_click_Color)
        self.dlg.colorTag.clicked.connect(self.on_click_ColorEtiqueta)
        self.dlg.CB_etiquetes.stateChanged.connect(self.on_checkAddTags)
        self.dlg.RB_color.toggled.connect(self.on_checkRB_color)
        self.dlg.RB_degradat.toggled.connect(self.on_checkRB_degradat)
        self.dlg.Transparencia.valueChanged.connect(self.on_valuechange_Transparencia)
        self.dlg.bt_ReloadLeyenda.clicked.connect(self.cerca_elements_Leyenda)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr('&CCU')
        # TODO: We are going to let the user set this up in a future iteration
        #self.toolbar = self.iface.addToolBar('CCU')
        #self.toolbar.setObjectName('Mapes Descriptius de Població')
        trobat=False
        for x in iface.mainWindow().findChildren(QToolBar,'CCU'): 
            self.toolbar = x
            trobat=True
        
        if not trobat:
            self.toolbar = self.iface.addToolBar('CCU')
            self.toolbar.setObjectName('CCU')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MapesDescriptiusPoblacio', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def on_click_btoPais(self,enabled):
        '''
        Activa o desactiva la llista de paisos
        a la pestanya origen.
        '''
        if enabled:
            self.dlg.LlistaPais.setEnabled(True)
        else:
            self.dlg.LlistaPais.setEnabled(False)
            
    def on_click_btoPais2(self,enabled):
        '''
        Activa o desactiva la llista de paisos
        a la pestanya nacionalitat.
        '''
        if enabled:
            self.dlg.LlistaPais2.setEnabled(True)
        else:
            self.dlg.LlistaPais2.setEnabled(False)
            
    def on_click_btoZones(self,enabled):
        '''
        Activa o desactiva la llista de zones
        continentals a la pestanya origen.
        '''
        if enabled:
            self.dlg.LlistaZonesCont.setEnabled(True)
        else:
            self.dlg.LlistaZonesCont.setEnabled(False)
            
    def on_click_btoZones2(self,enabled):
        '''
        Activa o desactiva la llista de zones
        continentals a la pestanya nacionalitat.
        '''
        if enabled:
            self.dlg.LlistaZonesCont2.setEnabled(True)
        else:
            self.dlg.LlistaZonesCont2.setEnabled(False)
                  
    def on_click_Tots_habitants(self,enabled):
        if enabled:
            self.dlg.grupMarge.setEnabled(False)
        else:
            self.dlg.grupMarge.setEnabled(True)
            
    def on_click_lbl_EDAT(self):
        self.dlg.GrupPestanyes.setCurrentIndex(0)
        self.dlg.pestanyesPrincipals.setCurrentIndex(0)
    
    def on_click_lbl_GENERE(self):
        self.dlg.GrupPestanyes.setCurrentIndex(1)
        self.dlg.pestanyesPrincipals.setCurrentIndex(0)
    
    def on_click_lbl_ESTUDIS(self):
        self.dlg.GrupPestanyes.setCurrentIndex(2)
        self.dlg.pestanyesPrincipals.setCurrentIndex(0)
    
    def on_click_lbl_ORIGEN(self):
        self.dlg.GrupPestanyes.setCurrentIndex(3)
        self.dlg.pestanyesPrincipals.setCurrentIndex(0)
    
    def on_click_lbl_NACIONALITAT(self):
        self.dlg.GrupPestanyes.setCurrentIndex(4)
        self.dlg.pestanyesPrincipals.setCurrentIndex(0)
    
    def on_click_Sortir(self):
        '''
        Tanca la finestra del plugin 
        '''
        global conn
        global connexioFeta
        self.EstatInicial()
        if connexioFeta:
            conn.close()
            connexioFeta = False
        self.dlg.close()
        
    def on_click_MarcarBotoHome(self, clicked):
        '''
        Activa o desactiva el boto Home
        a la pestanta Genere.
        '''
        if clicked:
            self.dlg.btoHome.setStyleSheet('background-color: #7fff7f')
            self.dlg.btoDona.setChecked(False)
        else:
            self.dlg.btoHome.setChecked(False)
            self.dlg.btoHome.setStyleSheet('background-color: rgb(227, 227, 227)')
            
    def on_click_MarcarBotoDona(self, clicked):
        '''
        Activa o desactiva el boto Dona
        a la pestanta Genere.
        '''
        if clicked:
            self.dlg.btoDona.setStyleSheet('background-color: #7fff7f')
            self.dlg.btoHome.setChecked(False)
        else:
            self.dlg.btoDona.setChecked(False)
            self.dlg.btoDona.setStyleSheet('background-color: rgb(227, 227, 227)')
    
    def on_click_MarcarBotoEDAT(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        d'Edat.
        '''
        
        if clicked:
            self.dlg.btoEDAT.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setTabEnabled(0,True)
            self.dlg.GrupPestanyes.tabBar().setTabTextColor(0,QColor(0,0,0))
            self.dlg.lbl_EDAT.setStyleSheet('QPushButton {border-radius: 2px;color: rgb(0, 0, 0);background-color: rgb(255, 217, 128);min-width: 80px;}')
            self.dlg.lbl_EDAT.setToolTip('ON')
            self.dlg.lbl_EDAT.setEnabled(True)
        else:
            self.dlg.btoEDAT.setStyleSheet('background-color: rgb(227, 227, 227)')
            self.dlg.GrupPestanyes.setTabEnabled(0,False)
            self.dlg.GrupPestanyes.tabBar().setTabTextColor(0,QColor(170,170,170))
            self.dlg.lbl_EDAT.setStyleSheet('QPushButton {border-radius: 2px;color: rgb(170, 170, 170);background-color: rgb(206, 206, 206);min-width: 80px;}')
            self.dlg.lbl_EDAT.setToolTip('OFF')
            self.dlg.lbl_EDAT.setEnabled(False)
        self.dlg.GrupPestanyes.setCurrentIndex(0)
    
    def on_click_MarcarBotoGENERE(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        de Genere.
        '''
        if clicked:
            self.dlg.btoGENERE.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setTabEnabled(1,True)
            self.dlg.GrupPestanyes.tabBar().setTabTextColor(1,QColor(0,0,0))
            self.dlg.lbl_GENERE.setStyleSheet('QPushButton {border-radius: 2px;color: rgb(0, 0, 0);background-color: rgb(255, 217, 128);min-width: 80px;}')
            self.dlg.lbl_GENERE.setToolTip('ON')
            self.dlg.lbl_GENERE.setEnabled(True)
        else:
            self.dlg.btoGENERE.setStyleSheet('background-color: rgb(227, 227, 227)')
            self.dlg.GrupPestanyes.setTabEnabled(1,False)
            self.dlg.GrupPestanyes.tabBar().setTabTextColor(1,QColor(170,170,170))
            self.dlg.lbl_GENERE.setStyleSheet('QPushButton {border-radius: 2px;color: rgb(170, 170, 170);background-color: rgb(206, 206, 206);min-width: 80px;}')
            self.dlg.lbl_GENERE.setToolTip('OFF')
            self.dlg.lbl_GENERE.setEnabled(False)
        self.dlg.GrupPestanyes.setCurrentIndex(1)
            
    def on_click_MarcarBotoESTUDIS(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        d'Estudis.
        '''
        if clicked:
            self.dlg.btoESTUDIS.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setTabEnabled(2,True)
            self.dlg.GrupPestanyes.tabBar().setTabTextColor(2,QColor(0,0,0))
            self.dlg.lbl_ESTUDIS.setStyleSheet('QPushButton {border-radius: 2px;color: rgb(0, 0, 0);background-color: rgb(255, 217, 128);min-width: 80px;}')
            self.dlg.lbl_ESTUDIS.setToolTip('ON')
            self.dlg.lbl_ESTUDIS.setEnabled(True)
        else:
            self.dlg.btoESTUDIS.setStyleSheet('background-color: rgb(227, 227, 227)')
            self.dlg.GrupPestanyes.setTabEnabled(2,False)
            self.dlg.GrupPestanyes.tabBar().setTabTextColor(2,QColor(170,170,170))
            self.dlg.lbl_ESTUDIS.setStyleSheet('QPushButton {border-radius: 2px;color: rgb(170, 170, 170);background-color: rgb(206, 206, 206);min-width: 80px;}')
            self.dlg.lbl_ESTUDIS.setToolTip('OFF')
            self.dlg.lbl_ESTUDIS.setEnabled(False)
        self.dlg.GrupPestanyes.setCurrentIndex(2)
            
            
    def on_click_MarcarBotoORIGEN(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        d'Origen.
        '''
        if clicked:
            self.dlg.btoORIGEN.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setTabEnabled(3,True)
            self.dlg.GrupPestanyes.tabBar().setTabTextColor(3,QColor(0,0,0))
            self.dlg.lbl_ORIGEN.setStyleSheet('QPushButton {border-radius: 2px;color: rgb(0, 0, 0);background-color: rgb(255, 217, 128);min-width: 80px;}')
            self.dlg.lbl_ORIGEN.setToolTip('ON')
            self.dlg.lbl_ORIGEN.setEnabled(True)
        else:
            self.dlg.btoORIGEN.setStyleSheet('background-color: rgb(227, 227, 227)')
            self.dlg.GrupPestanyes.setTabEnabled(3,False)
            self.dlg.GrupPestanyes.tabBar().setTabTextColor(3,QColor(170,170,170))
            self.dlg.lbl_ORIGEN.setStyleSheet('QPushButton {border-radius: 2px;color: rgb(170, 170, 170);background-color: rgb(206, 206, 206);min-width: 80px;}')
            self.dlg.lbl_ORIGEN.setToolTip('OFF')
            self.dlg.lbl_ORIGEN.setEnabled(False)
        self.dlg.GrupPestanyes.setCurrentIndex(3)

    
    def on_click_MarcarBotoNACIONALITAT(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        de Nacionalitat.
        '''
        if clicked:
            self.dlg.btoNACIONALITAT.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setTabEnabled(4,True)
            self.dlg.GrupPestanyes.tabBar().setTabTextColor(4,QColor(0,0,0))
            self.dlg.lbl_NACIONALITAT.setStyleSheet('QPushButton {border-radius: 2px;color: rgb(0, 0, 0);background-color: rgb(255, 217, 128);min-width: 80px;}')
            self.dlg.lbl_NACIONALITAT.setToolTip('ON')
            self.dlg.lbl_NACIONALITAT.setEnabled(True)
        else:
            self.dlg.btoNACIONALITAT.setStyleSheet('background-color: rgb(227, 227, 227)')
            self.dlg.GrupPestanyes.setTabEnabled(4,False)
            self.dlg.GrupPestanyes.tabBar().setTabTextColor(4,QColor(170,170,170))
            self.dlg.lbl_NACIONALITAT.setStyleSheet('QPushButton {border-radius: 2px;color: rgb(170, 170, 170);background-color: rgb(206, 206, 206);min-width: 80px;}')
            self.dlg.lbl_NACIONALITAT.setToolTip('OFF')
            self.dlg.lbl_NACIONALITAT.setEnabled(False)
        self.dlg.GrupPestanyes.setCurrentIndex(4)
            
    def on_checkRB_color(self, enabled):
        if enabled:
            self.dlg.color.setEnabled(True)
            self.dlg.Transparencia.setEnabled(True)
        else:
            self.dlg.color.setEnabled(False)
            self.dlg.Transparencia.setEnabled(True)
    
    def on_checkRB_degradat(self, enabled):
        if enabled:
            self.dlg.ColorDegradat.setEnabled(True)
            self.dlg.LE_rang.setEnabled(True)
            self.dlg.combo_Tipus.setEnabled(True)
        else:
            self.dlg.ColorDegradat.setEnabled(False)
            self.dlg.LE_rang.setEnabled(False)
            self.dlg.combo_Tipus.setEnabled(False)


    def Indicadors_selected(self):
        if self.dlg.Cmb_Calcul.currentIndex() in [7,8,9,10,11,12,13,14]:
            return True
        else: 
            return False     

    def Calcul_habitants_selected(self):
        if self.dlg.Cmb_Calcul.currentIndex() in [2,3,4]:
            return True 
        else: 
            return False     
                            
    
    def EstatInicial(self):
        '''
        @param self:
        Resteja tots els valors per defecte del plugin: estat inicial.
        '''
        global micolor
        global micolorTag
        global Versio_modul
        global QEstudis
        global TEMPORARY_PATH
        self.dlg.progressBar.setValue(0)
        self.dlg.progressBar.setVisible(False)
        self.dlg.progressBar.setMaximum(100)
        self.dlg.combo_Tipus.setEnabled(False)
        self.dlg.combo_Tipus.setCurrentIndex(1)
        self.dlg.ColorDegradat.setCurrentIndex(0)
        micolor = QColor(255,0,0,255)
        micolorTag = QColor(128,0,128,255)
        self.dlg.color.setStyleSheet('border:1px solid #000000; background-color: #ff0000')
        self.dlg.colorTag.setStyleSheet('border:1px solid #000000; background-color: #800080')
        self.dlg.versio.setText(Versio_modul)
        self.dlg.GrupPestanyes.setCurrentIndex(0)
        self.dlg.pestanyesPrincipals.setCurrentIndex(0)
        self.dlg.Cmb_Metode.setCurrentIndex(1)
        #self.dlg.RB_absoluts.setChecked(True)
        self.dlg.RB_color.setChecked(True)
        #self.dlg.I_dummy.setChecked(True)
        #self.dlg.I_dummy.setVisible(False)
        self.dlg.color.setEnabled(True)
        self.dlg.Transparencia.setEnabled(True)
        self.dlg.ColorDegradat.setEnabled(False)
        self.dlg.LE_rang.setEnabled(False)
        self.dlg.btoEdatRestrictiu.setChecked(True)
        self.dlg.btoDataAvui.setChecked(True)
        self.dlg.data.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dlg.data.setMaximumDate(QtCore.QDate(7999, 12, 28))
        self.dlg.data.setMaximumTime(QtCore.QTime(23, 59, 59))
        self.dlg.data.setEnabled(False)
        self.dlg.btoEDAT.setChecked(False)
        self.dlg.btoGENERE.setChecked(False)
        self.dlg.btoESTUDIS.setChecked(False)
        self.dlg.btoORIGEN.setChecked(False)
        self.dlg.btoNACIONALITAT.setChecked(False)
        self.dlg.txtEdatMin.clear()
        self.dlg.txtEdatMax.clear()
        self.dlg.txtEdatMax.setEnabled(True)
        self.dlg.txtEdatMin.setEnabled(True)
        self.dlg.lblEstatConn.setText('No connectat')
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
        self.dlg.btoPais.setChecked(True)
        self.dlg.btoPais_3.setChecked(True)
        self.dlg.btoHome.setChecked(False)
        self.dlg.btoDona.setChecked(False)
        self.dlg.btoHome.setStyleSheet('background-color: rgb(227, 227, 227)')
        self.dlg.btoDona.setStyleSheet('background-color: rgb(227, 227, 227)')
        self.dlg.LlistaPais.clear()
        self.dlg.LlistaPais2.clear()
        self.dlg.LlistaZonesCont.clear()
        self.dlg.LlistaZonesCont2.clear()
        self.dlg.llistaEstudis.clear()
        self.dlg.LlistaZonesCont2.setEnabled(False)
        self.dlg.LlistaZonesCont.setEnabled(False)
        self.dlg.mida.setEnabled(False)
        self.dlg.colorTag.setEnabled(False)
        self.dlg.min.setEnabled(False)
        self.dlg.max.setEnabled(False)
        self.dlg.CB_etiquetes.setChecked(False)
        self.dlg.mida.setValue(8.00)
        self.dlg.setEnabled(True)
        self.dlg.Transparencia_lbl.setText(str(self.dlg.Transparencia.value())+' %')
        self.dlg.GrupPestanyes.setTabEnabled(0,False)
        self.dlg.GrupPestanyes.setTabEnabled(1,False)
        self.dlg.GrupPestanyes.setTabEnabled(2,False)
        self.dlg.GrupPestanyes.setTabEnabled(3,False)
        self.dlg.GrupPestanyes.setTabEnabled(4,False)
        self.dlg.tabWidget.setCurrentIndex(0)
        self.dlg.comboLeyenda.clear()
        self.SetTooltipIndicadors()
        if (os.name=='nt'):
            TEMPORARY_PATH=os.environ['TMP']
        else:
            TEMPORARY_PATH=os.environ['TMPDIR']

    def SetTooltipIndicadors(self):
        self.dlg.Cmb_Calcul.setItemData(8,"(Pob >=65a / Pob <=15a)*100 per u.t.",QtCore.Qt.ToolTipRole)
        self.dlg.Cmb_Calcul.setItemData(9,"(Pob>=85a / Pob>=65a)*100 per u.t.",QtCore.Qt.ToolTipRole)
        self.dlg.Cmb_Calcul.setItemData(10,"(Pob entre 60 i 64a / Pob entre 15 i 19a)*100 per u.t.",QtCore.Qt.ToolTipRole)
        self.dlg.Cmb_Calcul.setItemData(11,"(Pob <=15a / Pob entre 16 i 64a)*100 per u.t.",QtCore.Qt.ToolTipRole)
        self.dlg.Cmb_Calcul.setItemData(12,"(Pob >=65a / Pob entre 16 i 64a)*100 per u.t.",QtCore.Qt.ToolTipRole)
        self.dlg.Cmb_Calcul.setItemData(13,"(Pob de nacionalitat no espanyola) / Pob total)*100",QtCore.Qt.ToolTipRole)
        self.dlg.Cmb_Calcul.setItemData(14,"(Pob <=14a / Dones entre 15 i 49a)*1000",QtCore.Qt.ToolTipRole)
    def on_valuechange_Transparencia(self):
        """Aquesta es una funcio auxiliar que canvia el valor de la etiqueta associada a la transperencia de la capa escollida"""
        self.dlg.Transparencia_lbl.setText(str(self.dlg.Transparencia.value())+' %')
        
        
    def on_checkAddTags(self, state):
        '''Aquesta funcio habilita o deshabilitat els diferents elements de les etiquetes'''
        if state != QtCore.Qt.Checked:
            self.dlg.mida.setEnabled(False)
            self.dlg.colorTag.setEnabled(False)
            self.dlg.min.setEnabled(False)
            self.dlg.max.setEnabled(False)
        else:
            self.dlg.mida.setEnabled(True)
            self.dlg.colorTag.setEnabled(True)
            self.dlg.min.setEnabled(True)
            self.dlg.max.setEnabled(True)

    def on_click_ColorEtiqueta(self):
        """Aquesta funció obra un dialeg per poder triar el color del contorn de l'area que volem pintar. """
        global micolorTag
        aux = QColorDialog.getColor()
        if aux.isValid():
            micolorTag = aux
        estilo='border:1px solid #000000; background-color: '+ micolorTag.name()
        self.dlg.colorTag.setStyleSheet(estilo)
        self.dlg.colorTag.setAutoFillBackground(True)
        pep=self.dlg.colorTag.palette().color(1)
        pass
        
    def on_click_Color(self):
        """Aquesta funció obra un dialeg per poder triar el color del contorn de l'area que volem pintar. """
        global micolor
        aux = QColorDialog.getColor()
        if aux.isValid():
            micolor = aux
        estilo='border:1px solid #000000; background-color: '+ micolor.name()
        self.dlg.color.setStyleSheet(estilo)
        self.dlg.color.setAutoFillBackground(True)
        pep=self.dlg.color.palette().color(1)
   
    def on_Change_Metode(self):
        if self.dlg.Cmb_Metode.currentIndex()==1:
            self.dlg.min.setValue(3000.00)
            self.dlg.max.setValue(25000.00)
            self.dlg.mida.setValue(9.00)
        if self.dlg.Cmb_Metode.currentIndex()==2:
            self.dlg.min.setValue(1000.00)
            self.dlg.max.setValue(17000.00)
            self.dlg.mida.setValue(8.00)
        if self.dlg.Cmb_Metode.currentIndex()==3:
            self.dlg.min.setValue(5000.00)
            self.dlg.max.setValue(50000.00)
            self.dlg.mida.setValue(12.00)
        if self.dlg.Cmb_Metode.currentIndex()==4:
            self.dlg.min.setValue(5000.00)
            self.dlg.max.setValue(50000.00)
            self.dlg.mida.setValue(12.00)
        if self.dlg.Cmb_Metode.currentIndex()==5:
            self.dlg.min.setValue(5000.00)
            self.dlg.max.setValue(50000.00)
            self.dlg.mida.setValue(20.00)
        if self.dlg.Cmb_Metode.currentIndex()==6:
            self.dlg.min.setValue(5000.00)
            self.dlg.max.setValue(50000.00)
            self.dlg.mida.setValue(20.00)
        if self.dlg.Cmb_Metode.currentIndex()==7:
            self.dlg.min.setValue(5000.00)
            self.dlg.max.setValue(50000.00)
            self.dlg.mida.setValue(20.00)

    def on_Change_Calcul(self):
        if self.dlg.Cmb_Calcul.currentIndex() in [2,3,4,7,8,9,10,11,12,13,14]:
            self.dlg.Cmb_Calcul.setToolTip(self.dlg.Cmb_Calcul.itemData(self.dlg.Cmb_Calcul.currentIndex(),QtCore.Qt.ToolTipRole))
        else:
            self.dlg.Cmb_Calcul.setCurrentIndex(0)
            self.dlg.Cmb_Calcul.setToolTip(self.dlg.Cmb_Calcul.itemData(self.dlg.Cmb_Calcul.currentIndex(),QtCore.Qt.ToolTipRole))
        if self.dlg.Cmb_Calcul.currentIndex() not in [7,8,9,10,11,12,13,14]:
            self.dlg.CB_Relatiu_total.setChecked(False)
            self.dlg.CB_Relatiu_total.setEnabled(False)
        else:
            self.dlg.CB_Relatiu_total.setEnabled(True)

    def on_Change_ComboConn(self):
        '''
        En el moment en que es modifica la opcio escollida 
        del combo o desplegable de les connexions,
        automàticament comprova si es pot establir
        connexió amb la bbdd seleccionada.
        '''
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        global schema
        global cur
        global conn
        global connexioFeta
        global Llista_Camps_Metodes
        global Llista_Metodes
        
        s = QSettings()
        self.dlg.comboLeyenda.clear()
        select = 'Selecciona connexió'
        nom_conn=self.dlg.comboConnexions.currentText()
        if nom_conn != select:
            s.beginGroup("PostgreSQL/connections/"+nom_conn)
            currentKeys = s.childKeys()
            
            nomBD1 = s.value("database", "" )
            contra1 = s.value("password", "" )
            host1 = s.value("host", "" )
            port1 = s.value("port", "" )
            usuari1 = s.value("username", "" )
            
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ffff7f')
            self.dlg.lblEstatConn.setText('Connectant...')
            self.dlg.lblEstatConn.setAutoFillBackground(True)
            QApplication.processEvents()
            
            #Sentencia SQL Estudis
            self.dlg.llistaEstudis.clear()
            sql=f'select distinct on ("studies_code") "studies_code", "studies" from "public"."census{Fitxer}" ORDER BY "studies_code", "studies";'
            self.dlg.LlistaPais.clear()
            self.dlg.LlistaPais2.clear()
            #sql2 = 'select distinct("previous_place_code"), "previous_place_name" FROM "public"."census{Fitxer}" where "origin_code" != 108 ORDER BY 2'
            sql2 = f'SELECT distinct on (A."previous_place_code") A."previous_place_code", B."country_name" FROM "public"."census{Fitxer}" A JOIN "public"."country{Fitxer}" B ON A."previous_place_code" = B."country_code"::INTEGER ORDER BY A."previous_place_code", B."country_name";'
            self.dlg.LlistaZonesCont.clear()
            self.dlg.LlistaZonesCont2.clear()
            sql3 = f'select distinct "continent_zone" FROM "public"."country{Fitxer}" WHERE "continent_zone" IS NOT NULL ORDER BY "continent_zone"'
            sql4 = f'select description from pg_description join pg_class on pg_description.objoid = pg_class.oid join pg_namespace on pg_class.relnamespace = pg_namespace.oid where relname = \'census{Fitxer}\' and nspname=\'public\''
           
            
            #Connexio
            nomBD = nomBD1.encode('ascii','ignore')
            usuari = usuari1.encode('ascii','ignore')
            servidor = host1.encode('ascii','ignore')     
            contrasenya = contra1.encode('ascii','ignore')
            try:
                estructura = "dbname='"+ nomBD.decode("utf-8") + "' user='" + usuari.decode("utf-8") +"' host='" + servidor.decode("utf-8") +"' password='" + contrasenya.decode("utf-8") + "'"# schema='"+schema+"'"
                conn = psycopg2.connect(estructura)
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
                self.dlg.lblEstatConn.setText('Connectat')
                cur = conn.cursor()
                connexioFeta = True
                self.detect_database_version(cur, conn)
                cur.execute(sql)
                rows = cur.fetchall()
                for index,row in enumerate(rows,start=0):
                    desc=row[0]
                    desc1=row[1]
                    self.dlg.llistaEstudis.addItem(desc1)
                    self.dlg.llistaEstudis.item(index).setToolTip(str(desc))
                
            except Exception as ex:
                msg_error="Error en la sentencia SQL següent:\n"+sql
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
            try:
                cur.execute(sql2)
                desc1 = int(108)
                self.dlg.LlistaPais.addItem('ESPANYA')
                self.dlg.LlistaPais.item(0).setToolTip(str(desc1))
                self.dlg.LlistaPais2.addItem('ESPANYA')
                self.dlg.LlistaPais2.item(0).setToolTip(str(desc1))
                rows = cur.fetchall()
                for index,row in enumerate(rows,start=1):
                    desc=row[0]
                    desc1=row[1]
                    if desc != 108 or desc != '108':
                        self.dlg.LlistaPais.addItem(desc1)
                        self.dlg.LlistaPais.item(index).setToolTip(str(desc))
                        self.dlg.LlistaPais2.addItem(desc1)
                        self.dlg.LlistaPais2.item(index).setToolTip(str(desc))
                
            except Exception as ex:
                msg_error="Error en la sentencia SQL següent:\n"+sql2
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
            try:
                cur.execute(sql3)
                rows = cur.fetchall()
                for index,row in enumerate(rows,start=0):
                    desc=row[0]
                    self.dlg.LlistaZonesCont.addItem(desc)
                    self.dlg.LlistaZonesCont.item(index).setToolTip(desc)
                    self.dlg.LlistaZonesCont2.addItem(desc)
                    self.dlg.LlistaZonesCont2.item(index).setToolTip(desc)
            except Exception as ex:
                msg_error="Error en la sentencia SQL següent:\n"+sql3
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
            try:
                cur.execute(sql4)
                rows = cur.fetchall()
                #print rows[0][0]
                #self.dlg.data.setDateTime(QtCore.QDateTime.fromString(str(rows[0][0]),"d/M/yyyy"))
                if len(rows)!=0:
                    self.dlg.data.setDateTime(QtCore.QDateTime.fromString(str(rows[0][0]),"d/M/yyyy"))
                else:
                    self.dlg.data.setDateTime(QtCore.QDateTime.currentDateTime())
                
            except Exception as ex:
                msg_error="Error en la sentencia SQL següent:\n"+sql4
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
                return
                                        # ["ILLES","PARCELES","SECCIONS","BARRIS","DISTRICTES POSTALS","DISTRICTES INE","SECTORS"]
            Metodes,tooltips=self.Comprova_Metodes(Llista_Metodes,Llista_Camps_Metodes,cur)
            self.populateComboBox_tooltip(self.dlg.Cmb_Metode ,Metodes,tooltips,'Selecciona Mètode',True)
            #self.addTooltip_toCombo(tooltips,self.dlg.Cmb_Metode )
            self.cerca_elements_Leyenda()

        else:
            self.dlg.lblEstatConn.setText('No connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')

    def addTooltip_toCombo(self,tooltips,combo):
        for index,item in enumerate(tooltips):
            combo.setItemData(index+1,tooltips[index],QtCore.Qt.ToolTipRole)
    
    def Comprova_Metodes(self,llista_noms,llista_camps,cur):
        resultat=[]
        
        resultat_tooltip=[]
        for index,item in enumerate(llista_camps):
            sql="select table_name from information_schema.tables where table_name in ('"+item+"') and table_schema ='public'"
            cur.execute(sql)
            rows = cur.fetchall()
            if len(rows)>0:
                resultat.append(llista_noms[index])
                resultat_tooltip.append(llista_camps[index])
        return resultat,resultat_tooltip

    def controlErrorInput(self):
        errors = []
        if self.dlg.min.value() > self.dlg.max.value():
            errors.append("En la visualització en escala,\nel valor mínim és major que el màxim.")
        try:
            numero = int(float(self.dlg.LE_rang.text()))
            if numero < 0:
                errors.append("El número de rangs no pot ser negatiu")
        except:
            errors.append("El número de rangs no és vàlid")
        if (self.dlg.btoEDAT.isChecked() and not(self.dlg.Tots_els_habitants.isChecked())):
            numero2 = -2
            numero3 = -3   
            try:
                numero2 = int(float(self.dlg.txtEdatMin.text()))
                if numero2 < 0:
                    errors.append('L\'edat mínima no pot ser negativa')
            except:
                errors.append('L\'edat mínima no és vàlida')
            try:
                numero3 = int(float(self.dlg.txtEdatMax.text()))
                if numero3 < 0:
                    errors.append('L\'edat màxima no pot ser negativa')
            except:
                errors.append("L\'edat màxima no és vàlida")
            if numero2 != -2 and numero3 != -3:
                if numero2 > numero3:
                    errors.append("L'edat mínima no pot ser més gran que la màxima.")
        return errors
    
    def on_Change_ComboLeyenda(self):
        L_capa = self.dlg.comboLeyenda.currentText()

        if L_capa == '' or L_capa == 'Selecciona capa':
            return
        
        errors = self.controlEntitatLeyenda(L_capa) # retorna una llista amb aquells camps que no hi siguin

        if not 'id' in errors:
            alg_params = {
                'INPUT': L_capa,
                'FIELD_NAME': 'id',
                'FIELD_TYPE': 1,
                'FORMULA': '@id',
                'OUTPUT': 'memory:'
            }
            L_capa = processing.run("qgis:fieldcalculator", alg_params)['OUTPUT']
        return True
    
    def cerca_elements_Leyenda(self):
        if self.dlg.comboConnexions.currentText() != 'Selecciona connexió':
            try:
                aux = []
                layers = QgsProject.instance().mapLayers().values()
                for layer in layers:
                    if isinstance(layer, QgsVectorLayer):
                        if layer.geometryType() == QgsWkbTypes.PolygonGeometry:
                            aux.append(layer.name())

                self.populateComboBox(self.dlg.comboLeyenda, aux, 'Selecciona una entitat', True)
            except Exception as ex:
                self.dlg.setEnabled(True)
                missatge="Error al afegir els elements de la llegenda"
                print(missatge)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", missatge)
                return

    def controlEntitatLeyenda(self, entitat):
        list = []

        layers = QgsProject.instance().mapLayers().values()
        if layers != None:
            for layer in layers:
                if layer.sourceName() == entitat:
                    for each in layer.fields():
                        if each.name() == 'id':
                            list.append('id')
        return list

    def on_click_crearTaula(self):
        '''
        Funcio principal:
        Funcio creadora de les taules.
        1. Es connecta amb la BDD escollida
        2. Inicialitza variables per crear les instruccions SQL
        3. Transforma les instruccions donades per l'usuari en sentencies SQl.
        4. Tria quin dels metodes de treball s'utilitza i executa les sentencies.
        5. Graba el resultat a la BDD
        6. Treu un missatge on comptabilitza el nombre d'habitants que formen les taules.
        '''        
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        global schema
        global cur
        global conn
        global Llista_Camps_Metodes
        global Llista_Metodes
        global Fitxer
        
        s = QSettings()

        uri = QgsDataSourceUri()
        try:
            uri.setConnection(host1, port1, nomBD1, usuari1, contra1)
        except Exception as ex:
            self.dlg.setEnabled(True)
            QMessageBox.information(None, "Error", "Error al connectar amb la base de dades")
            return
        
        consoleWidget = iface.mainWindow().findChild(QDockWidget, 'PythonConsole')
        if consoleWidget is None:
            iface.actionShowPythonDialog().trigger()
            QApplication.processEvents()
            consoleWidget = iface.mainWindow().findChild(QDockWidget, 'PythonConsole')
            consoleWidget.console.shellOut.clearConsole()
            consoleWidget.setVisible(False)

        self.dlg.setEnabled(False)
        '''Control d'errors'''
        self.dlg.progressBar.setValue(0)
        self.dlg.progressBar.setVisible(True)
        llistaErrors = self.controlErrorInput()
        self.dlg.progressBar.setValue(10)

        if len(llistaErrors) > 0:
            llista = "Llista d'errors:\n\n"
            for i in range (0,len(llistaErrors)):
                llista += ("- "+llistaErrors[i] + '\n')
            QMessageBox.information(None, "Error", llista)
            self.dlg.setEnabled(True)
            self.dlg.progressBar.setVisible(False)
        elif ((not self.dlg.btoEDAT.isChecked()) and (not self.dlg.btoGENERE.isChecked()) and (not self.dlg.btoESTUDIS.isChecked()) and (not self.dlg.btoORIGEN.isChecked()) and (not self.dlg.btoNACIONALITAT.isChecked())):
            QMessageBox.information(None, "Error 1", "No hi ha cap filtre seleccionat.\nSeleccioneu un filtre.")
            print ("No hi ha cap filtre seleccionat.\nSeleccioneu un filtre.")
            self.dlg.setEnabled(True)
            self.dlg.progressBar.setVisible(False)
        elif (not(self.Calcul_habitants_selected()) and not (self.Indicadors_selected())):
            QMessageBox.information(None, "Error 2", "No hi ha cap sortida seleccionada.\nSeleccioneu una sortida.")
            print ("No hi ha cap sortida seleccionada.\nSeleccioneu una sortida.")
            self.dlg.setEnabled(True)
            self.dlg.progressBar.setVisible(False)
        elif self.dlg.tabWidget.currentIndex() == 0:
            if self.dlg.Cmb_Metode.currentIndex() == 0:
                QMessageBox.information(None, "Error 3.1", "No hi ha cap mètode de treball seleccionat (base dades).\nSeleccioneu un mètode.")
                print ("No hi ha cap mètode de treball seleccionat.\nSeleccioneu un mètode.")
                self.dlg.setEnabled(True)
                self.dlg.progressBar.setVisible(False)
        elif self.dlg.tabWidget.currentIndex() == 1:
            if self.dlg.comboLeyenda.currentIndex() == 0:
                QMessageBox.information(None, "Error 3.2", "No hi ha cap mètode de treball seleccionat (llegenda).\nSeleccioneu un mètode.")
                print ("No hi ha cap mètode de treball seleccionat.\nSeleccioneu un mètode.")
                self.dlg.setEnabled(True)
                self.dlg.progressBar.setVisible(False)
        else:
            if self.dlg.tabWidget.currentIndex() != 0:
                if not self.on_Change_ComboLeyenda():
                    self.dlg.setEnabled(True)
                    return
            
        arxiuLlegit = False
        QApplication.processEvents()


        nom_conn=self.dlg.comboConnexions.currentText()
        select = 'Selecciona connexió'
        self.dlg.progressBar.setValue(20)

        #if self.dlg.tabWidget.currentIndex() == 0:

        if (nom_conn != select):
            #fileName = QtGui.QFileDialog.getSaveFileName(self.dlg, "Guardar com...", "c:/", "CSV files (*.csv)")
            ##startingDir = cmds.workspace(q=True, rootDirectory=True)
            '''Eleccio del cami de destí dels arxius'''
            #fileName= QtGui.QFileDialog.getExistingDirectory(self.dlg,"Open a folder","c:/",QtGui.QFileDialog.ShowDirsOnly)
            #if fileName != '':
                                
            s.beginGroup("PostgreSQL/connections/"+nom_conn)
            currentKeys = s.childKeys()
            '''Connexio'''
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ffff7f')
            self.dlg.lblEstatConn.setText('Connectant...')
            self.dlg.lblEstatConn.setAutoFillBackground(True)
            QApplication.processEvents()
            cur = conn.cursor()

            self.detect_database_version(cur, conn)
            
            #Sentencia SQL Estudis
            where = 'where '      
            
            #self.mostraSHPperPantalla("", "Parceles")
            missatge=""
            if (self.dlg.Cmb_Calcul.currentIndex() in [8,9,10,11,12,14] and not(self.dlg.Tots_els_habitants.isChecked())):
                missatge+="L'indicador "+self.dlg.Cmb_Calcul.currentText()+" es calcularà amb tots els habitants, no s'aplicarà el filtre d'EDAT.\n"
            if (self.dlg.Cmb_Calcul.currentIndex() in [14] and self.dlg.btoGENERE.isChecked()):
                missatge+="L'indicador "+self.dlg.Cmb_Calcul.currentText()+" es calcularà amb tots els habitants, no s'aplicarà el filtre de GENERE.\n"
            if self.dlg.Cmb_Calcul.currentIndex() in [13]:
                missatge+="Per calcular l'indicador "+self.dlg.Cmb_Calcul.currentText()+", no s'aplicarà el filtre de NACIONALITAT."
            if missatge != "":
                QMessageBox.information(None, "Informació del mòdul", missatge)
            
            try:
                self.dlg.progressBar.setValue(25)
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: rgb(255, 170, 142)')
                self.dlg.lblEstatConn.setText('Connectat i processant')
                QApplication.processEvents()

                # Si estem afagant una capa de la llegenda...
                if self.dlg.tabWidget.currentIndex() == 1:
                    layers = QgsProject.instance().mapLayers().values()
                    if layers != None:
                        for layer in layers:
                            if layer.name() == self.dlg.comboLeyenda.currentText():
                                try:
                                    sql_SRID = "SELECT Find_SRID('public', f'zone{Fitxer}', 'geom')"
                                    cur.execute(sql_SRID)
                                except Exception as ex:
                                    self.dlg.setEnabled(True)
                                    print(f"Error SELECT SRID zone{Fitxer}")
                                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                    message = template.format(type(ex).__name__, ex.args)
                                    print (message)
                                    QMessageBox.information(None, "Error", f"Error SELECT SRID zone{Fitxer}")
                                    conn.rollback()
                                    return
                                auxlist = cur.fetchall()
                                Valor_SRID = auxlist[0][0]
                                # TODO: Definir mètode per comprovar si la capa és vàlida
                                #layer = self.comprobarValidez(layer, Valor_SRID)
                                error = QgsVectorLayerExporter.exportLayer(layer, 'table="public"."layerexportat'+Fitxer+'" (geom) '+uri.connectionInfo(), "postgres", layer.crs(), False)
                                if error[0] != 0:
                                    iface.messageBar().pushMessage(u'Error', error[1])
                                
                                try:
                                    sql_SRID = f"SELECT Find_SRID('public', 'layerexportat{Fitxer}', 'geom')"
                                    cur.execute(sql_SRID)
                                except Exception as ex:
                                    self.dlg.setEnabled(True)
                                    print("Error SELECT SRID layerexportat")
                                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                    message = template.format(type(ex).__name__, ex.args)
                                    print (message)
                                    QMessageBox.information(None, "Error", "Error SELECT SRID layerexportat")
                                    conn.rollback()
                                    return
                                auxlist = cur.fetchall()
                                Valor_SRID = auxlist[0][0]
                                alter = 'ALTER TABLE "layerexportat'+Fitxer+'" ALTER COLUMN geom TYPE geometry(Polygon, '+str(Valor_SRID)+') USING ST_GeometryN(geom, 1);'

                                try:
                                    cur.execute(alter)
                                    conn.commit()
                                except Exception as ex:
                                    self.dlg.setEnabled(True)
                                    print("Error ALTER TABLE layerexportat")
                                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                    message = template.format(type(ex).__name__, ex.args)
                                    print (message)
                                    QMessageBox.information(None, "Error", "Error ALTER TABLE layerexportat")
                                    conn.rollback()
                                    return
                                
                                select = 'SELECT COUNT(*) FROM "layerexportat'+Fitxer+'";'

                                try:
                                    cur.execute(select)
                                    auxlist = cur.fetchall()
                                    if auxlist[0][0] == 0:
                                        self.dlg.setEnabled(True)
                                        ErrorMessage = "La entitat escollida és buida."
                                        QMessageBox.information(None, "Error", ErrorMessage)
                                        conn.rollback()
                                        return
                                except Exception as ex:
                                    self.dlg.setEnabled(True)
                                    print("Error SELECT COUNT layerexportat")
                                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                    message = template.format(type(ex).__name__, ex.args)
                                    print (message)
                                    QMessageBox.information(None, "Error", "Error SELECT COUNT layerexportat")
                                    conn.rollback()
                                    return
                    else:
                        QMessageBox.information(None, "Error", "No hi ha cap capa a la llegenda.")
                        self.dlg.setEnabled(True)
                        self.dlg.progressBar.setVisible(False)
                        return
                
                '''Composicio del where'''
                '''Filtre d'edat'''
                if self.dlg.btoEDAT.isChecked():
                    self.dlg.progressBar.setValue(30)
                    max = 0
                    min = 0
                    try:
                        if self.dlg.Cmb_Calcul.currentIndex() in [8,9,10,11,12,14]:
                            self.dlg.Tots_els_habitants.setChecked(True)
                        if self.dlg.Tots_els_habitants.isChecked():
                            max=200
                            min=0
                        else:
                            max = int(self.dlg.txtEdatMax.text())
                            min = int(self.dlg.txtEdatMin.text())
                        
                    except Exception as ex:
                        self.dlg.GrupPestanyes.setCurrentIndex(0)
                        self.tornaConnectat()
                        print("Error llegir les edats")
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print (message)
                        QMessageBox.information(None, "Error", "Error al llegir les edats.\nEls camps edat mínima i edat màxima han d'estar plens")
                        self.dlg.setEnabled(True)
                        self.dlg.progressBar.setVisible(False)
                        return
                    
                    if ((min > max) or (min < 0) or (max <= 0)):
                        QMessageBox.information(None, "Error", "Error:\n minim > màxim o número/s negatiu/s")
                        self.dlg.GrupPestanyes.setCurrentIndex(0)
                        self.tornaConnectat()
                        self.dlg.setEnabled(True)
                        self.dlg.progressBar.setVisible(False)
                        return
                    hora = self.dlg.data.date()
                    horaAct = QtCore.QDateTime.currentDateTime()
                    diaActual = str(horaAct.date().day()) + "-" + str(horaAct.date().month()) + "-" + str(horaAct.date().year())
                    
                    if self.dlg.btoEdatRestrictiu.isChecked():
                        if self.dlg.btoData.isChecked():
                            diaTriatMin = str(hora.day()) + "-" + str(hora.month()) + "-" + str(hora.year() - min)
                            diaTriatMax = str(hora.day()) + "-" + str(hora.month()) + "-" + str(hora.year() - max)
                            where += '"date_of_birth" >= to_date(' + "'" + diaTriatMax + "'," + "'DD-MM-YYYY')" + ' AND "date_of_birth" <= to_date(' + "'" + diaTriatMin + "'," + "'DD-MM-YYYY')"
                            
                        elif self.dlg.btoDataAvui.isChecked():
                            diaTriatMin = str(horaAct.date().day()) + "-" + str(horaAct.date().month()) + "-" + str(horaAct.date().year() - min)
                            diaTriatMax = str(horaAct.date().day()) + "-" + str(horaAct.date().month()) + "-" + str(horaAct.date().year() - max)
                            where += '"date_of_birth" >= to_date(' + "'" + diaTriatMax + "'," + "'DD-MM-YYYY')" + ' AND "date_of_birth" <= to_date(' + "'" + diaTriatMin + "'," + "'DD-MM-YYYY')"
                    elif self.dlg.btoEdatAmpli.isChecked():
                        if self.dlg.btoData.isChecked():
                            diaTriatMin = str(hora.day()) + "-" + str(hora.month()) + "-" + str(hora.year() - min)
                            diaTriatMax = str(hora.day()) + "-" + str(hora.month()) + "-" + str(hora.year() - (max+1))
                            where += '"date_of_birth" > to_date(' + "'" + diaTriatMax + "'," + "'DD-MM-YYYY')" + ' AND "date_of_birth" <= to_date(' + "'" + diaTriatMin + "'," + "'DD-MM-YYYY')"
                            
                        elif self.dlg.btoDataAvui.isChecked():
                            diaTriatMin = str(horaAct.date().day()) + "-" + str(horaAct.date().month()) + "-" + str(horaAct.date().year() - min)
                            diaTriatMax = str(horaAct.date().day()) + "-" + str(horaAct.date().month()) + "-" + str(horaAct.date().year() - (max+1))
                            where += '"date_of_birth" > to_date(' + "'" + diaTriatMax + "'," + "'DD-MM-YYYY')" + ' AND "date_of_birth" <= to_date(' + "'" + diaTriatMin + "'," + "'DD-MM-YYYY')"
                
                '''Filtre de genere'''    
                if self.dlg.Cmb_Calcul.currentIndex() in [14]:
                    self.dlg.btoGENERE.setChecked(False)                        
                if self.dlg.btoGENERE.isChecked():
                    self.dlg.progressBar.setValue(35)
                    if self.dlg.btoEDAT.isChecked():
                        where += ' AND '
                    if self.dlg.btoHome.isChecked():
                        where += '"sex" = 1'
                    elif self.dlg.btoDona.isChecked():
                        where += '"sex" = 6'
                    else:
                        QMessageBox.information(None, "Error", "Error:\nNo hi ha cap gènere seleccionat.")
                        self.dlg.GrupPestanyes.setCurrentIndex(1)
                        self.tornaConnectat()
                        self.dlg.setEnabled(True)
                        self.dlg.progressBar.setVisible(False)
                        return

                '''Filtre d'estudis'''
                if self.dlg.btoESTUDIS.isChecked():
                    self.dlg.progressBar.setValue(40)
                    if self.dlg.btoEDAT.isChecked() or self.dlg.btoGENERE.isChecked():
                        where += ' AND '
                    llistaEST = self.dlg.llistaEstudis.selectedItems()
                    if len(llistaEST)>0:
                        where += '('
                        for item in llistaEST:
                            where += '"studies_code" = '+ item.toolTip()+ ' OR '
                        where=where[0:len(where)-4]
                        where += ')'
                    else:
                        QMessageBox.information(None, "Error", "Error:\nNo hi ha cap estudi seleccionat.")
                        self.dlg.GrupPestanyes.setCurrentIndex(2)
                        self.tornaConnectat()
                        self.dlg.setEnabled(True)
                        self.dlg.progressBar.setVisible(False)
                        return
                
                '''Filtre d'origen'''
                if self.dlg.btoORIGEN.isChecked():
                    self.dlg.progressBar.setValue(45)
                    if self.dlg.btoEDAT.isChecked() or self.dlg.btoGENERE.isChecked() or self.dlg.btoESTUDIS.isChecked():
                        where += ' AND '
                    if self.dlg.btoPais.isChecked():
                        llistaORG = self.dlg.LlistaPais.selectedItems()
                        if len(llistaORG)>0:
                            where += '('
                            for item in llistaORG:
                                if item.toolTip() != '108':
                                    where += '"previous_place_code" = '+ item.toolTip() + ' AND "origin_code" != 108'+ ' OR '
                                else:
                                    where += '"origin_code" = 108'+ ' OR '
                            where=where[0:len(where)-4]
                            where += ')'
                        else:
                            QMessageBox.information(None, "Error", "Error:\nNo hi ha cap país seleccionat.")
                            self.dlg.GrupPestanyes.setCurrentIndex(3)
                            self.tornaConnectat()
                            self.dlg.setEnabled(True)
                            self.dlg.progressBar.setVisible(False)
                            return 
                    elif self.dlg.btoZones.isChecked():                                 
                        llistaORG = self.dlg.LlistaZonesCont.selectedItems()
                        if len(llistaORG)>0:
                            zonaCont = 'WHERE '
                            for item in llistaORG:
                                zonaCont += '"continent_zone" = '  + chr(39) + item.toolTip().replace("\'","''")  + chr(39) + ' OR '
                            zonaCont=zonaCont[0:len(zonaCont)-4]
                            SQL_Pro = f'SELECT "country_code" from "public"."country{Fitxer}" '  + zonaCont  + ' ORDER BY 1'
                            try:  
                                cur.execute(SQL_Pro)
                                rows = cur.fetchall()
                            except Exception as ex:
                                self.tornaConnectat()
                                print("Error SELECT concopdai")
                                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                message = template.format(type(ex).__name__, ex.args)
                                print (message)
                                QMessageBox.information(None, "Error", "Error SELECT country_code")
                                self.dlg.setEnabled(True)
                                self.dlg.progressBar.setVisible(False)
                                return
                            where += '('
                            for index,row in enumerate(rows,start=0):
                                if index == 0:
                                    if row[0] != 108:
                                        where += '("previous_place_code" = ' + str(row[0]) + ' and "origin_code" != 108)'
                                    else:
                                        where += '("origin_code" = 108)'
                                else:
                                    if row[0] != 108:
                                        where += ' or ("previous_place_code" = ' + str(row[0]) + ' and "origin_code" != 108)'
                                    else:
                                        where += ' or ("origin_code" = 108)'
                            where += ')'
                        else:
                            QMessageBox.information(None, "Error", "Error:\nNo hi ha cap zona continental seleccionada.")
                            self.dlg.GrupPestanyes.setCurrentIndex(3)
                            self.tornaConnectat()
                            self.dlg.setEnabled(True)
                            self.dlg.progressBar.setVisible(False)
                            return
                    elif self.dlg.btoEuropa27.isChecked():
                        SQL_Pro = f'select "country_code" from "public"."country{Fitxer}"  WHERE  "ue27" = 1 ORDER BY 1'
                        try:
                            cur.execute(SQL_Pro)
                            rows = cur.fetchall()
                        except Exception as ex:
                            self.tornaConnectat()
                            print("Error SELECT concopdai")
                            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                            message = template.format(type(ex).__name__, ex.args)
                            print (message)
                            QMessageBox.information(None, "Error", "Error SELECT country_code")
                            self.dlg.setEnabled(True)
                            self.dlg.progressBar.setVisible(False)
                            return
                        where += '('
                        for index,row in enumerate(rows,start=0):
                            if index == 0:
                                if row[0] != 108:
                                    where += '("previous_place_code" = ' + str(row[0]) + ' and "origin_code" != 108)'
                                else:
                                    where += '("origin_code" = 108)'
                            else:
                                if row[0] != 108:
                                    where += ' or ("previous_place_code" = ' + str(row[0]) + ' and "origin_code" != 108)'
                                else:
                                    where += ' or ("origin_code" = 108)'
                        where += ')'
                
                '''Filtre de nacionalitat'''
                if self.dlg.Cmb_Calcul.currentIndex() in [13]:
                    self.dlg.btoNACIONALITAT.setChecked(False)                        
                if self.dlg.btoNACIONALITAT.isChecked():
                    self.dlg.progressBar.setValue(50)
                    
                    if self.dlg.btoEDAT.isChecked() or self.dlg.btoGENERE.isChecked() or self.dlg.btoESTUDIS.isChecked() or self.dlg.btoORIGEN.isChecked():
                        where += ' AND '
                    if self.dlg.btoPais_3.isChecked():
                        llistaORG = self.dlg.LlistaPais2.selectedItems()
                        if len(llistaORG)>0:
                            where += '('
                            for item in llistaORG:
                                where += '"nation_code" = '+ item.toolTip() + ' OR '
                            where=where[0:len(where)-4]
                            where += ')'
                            
                        else:
                            QMessageBox.information(None, "Error", "Error:\nNo hi ha cap país seleccionat.")
                            self.dlg.GrupPestanyes.setCurrentIndex(4)
                            self.tornaConnectat()
                            self.dlg.setEnabled(True)
                            self.dlg.progressBar.setVisible(False)
                            return 
                    elif self.dlg.btoZones_3.isChecked():
                        llistaORG = self.dlg.LlistaZonesCont2.selectedItems()
                        if len(llistaORG)>0:
                            zonaCont = 'WHERE '
                            for item in llistaORG:
                                zonaCont += '"continent_zone" = '  + chr(39) + item.toolTip().replace("\'","''")  + chr(39) + ' OR '

                            zonaCont=zonaCont[0:len(zonaCont)-4]
                            SQL_Pro = f'SELECT "country_code" from "public"."country{Fitxer}" '  + zonaCont  + ' ORDER BY 1' 
                            try:
                                cur.execute(SQL_Pro)
                                rows = cur.fetchall()
                            except Exception as ex:
                                self.tornaConnectat()
                                print("Error SELECT concopdai")
                                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                message = template.format(type(ex).__name__, ex.args)
                                print (message)
                                QMessageBox.information(None, "Error", "Error SELECT country_code")
                                self.dlg.setEnabled(True)
                                self.dlg.progressBar.setVisible(False)
                                return
                            where += '('
                            for index,row in enumerate(rows,start=0):
                                if index == 0:
                                    where += '"nation_code" = ' + str(row[0])
                                else:
                                    where += ' or "nation_code" = ' + str(row[0])
                            where += ')'
                        else:
                            QMessageBox.information(None, "Error", "Error:\nNo hi ha cap zona continental seleccionada.")
                            self.dlg.GrupPestanyes.setCurrentIndex(4)
                            self.tornaConnectat()
                            self.dlg.setEnabled(True)
                            self.dlg.progressBar.setVisible(False)
                            return
                    elif self.dlg.btoEuropa27_3.isChecked():
                        SQL_Pro = f'select "country_code" from "public"."country{Fitxer}"  WHERE  "ue27" = 1 ORDER BY 1'
                        try:
                            cur.execute(SQL_Pro)
                            rows = cur.fetchall()
                        except Exception as ex:
                            self.tornaConnectat()
                            print("Error SELECT concopdai")
                            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                            message = template.format(type(ex).__name__, ex.args)
                            print (message)
                            QMessageBox.information(None, "Error", "Error SELECT country_code")
                            self.dlg.setEnabled(True)
                            self.dlg.progressBar.setVisible(False)
                            return
                        where += '('
                        for index,row in enumerate(rows,start=0):
                            if index == 0:
                                where += '"nation_code" = ' + str(row[0])
                            else:
                                where += ' or "nation_code" = ' + str(row[0])
                        where += ')'
                
                where += "\n"
                self.dlg.progressBar.setValue(55)
                '''Execució de la sentencia SQL'''
                # TODO: Aqui s'ha d'afegir la comprovacio de metodes normals o metode llegenda
                if self.dlg.tabWidget.currentIndex() == 0:
                    nom_entitat=self.dlg.Cmb_Metode.itemData(self.dlg.Cmb_Metode.currentIndex(),QtCore.Qt.ToolTipRole)
                    Metode=self.dlg.Cmb_Metode.currentText()
                else:
                    nom_entitat=f'layerexportat{Fitxer}'
                    print(nom_entitat)
                    Metode=self.dlg.comboLeyenda.currentText()
                if self.Indicadors_selected():
                    csv=self.Retorna_Indicador(where,nom_entitat,Metode)
                    if csv=="error":
                        self.tornaConnectat()
                        template = "No hi ha cap Indicador sel·lecionat."
                        #message = template.format(type(ex).__name__, ex.args)
                        #print (message)
                        QMessageBox.information(None, "Error", "No hi ha cap Indicador sel·lecionat.")
                        self.dlg.setEnabled(True)
                        self.dlg.progressBar.setVisible(False)
                        return
                else:
                    if self.dlg.Cmb_Metode.currentText()=='ILLES':
                        sql1 =  f'''
                                SELECT  parcial.id_zone, parcial.geom, parcial.cadastral_zoning_reference, parcial."Habitants",
                                        total."Habitants" AS "hab_total",
                                        round((parcial."Habitants"::numeric/total."Habitants"::numeric)*100,2) AS "hab_rel",
                                        round(((parcial."Habitants"/(ST_Area(parcial."geom")/10^6))::numeric)::numeric,2) AS "densitat_9"
                                FROM (
                                    SELECT i.id_zone, i.geom, i.cadastral_zoning_reference, count(*) AS "Habitants"
                                    FROM "public"."census{Fitxer}" p
                                    JOIN "{nom_entitat}" i
                                    ON p."cadastral_zoning_reference" = i."cadastral_zoning_reference"
                                )
                                '''
                        sql2 = f'''
                                GROUP BY i."cadastral_zoning_reference", i."id_zone", i."geom") parcial
                                JOIN (
                                    SELECT i.id_zone, i.geom, i.cadastral_zoning_reference, count(*) AS "Habitants"
                                    FROM "public"."census{Fitxer}" p
                                    JOIN "{nom_entitat}" i
                                    ON p."cadastral_zoning_reference" = i."cadastral_zoning_reference"
                                    GROUP BY i."cadastral_zoning_reference", i."id_zone", i."geom"
                                ) total
                                ON total."id_zone" = parcial."id_zone"
                                ''' 
                    
                    elif self.dlg.Cmb_Metode.currentText()=='PARCELES':                            
                        sql1 = f'''
                                SELECT  parcial.id_parcel, parcial.geom, parcial.cadastral_reference, parcial."Habitants",
                                        total."Habitants" AS "hab_total",
                                        round((parcial."Habitants"::numeric/total."Habitants"::numeric)*100,2) AS "hab_rel",
                                        round(((parcial."Habitants"/(ST_Area(parcial."geom")/10^6))::numeric)::numeric,2) AS "densitat_9"
                                FROM (
                                    SELECT pa.id_parcel, pa.geom, pa.cadastral_reference, count(*) AS "Habitants"
                                    FROM "public"."census{Fitxer}" p
                                    JOIN "{nom_entitat}" pa
                                    ON p."cadastral_reference" = pa."cadastral_reference"
                                '''
                        sql2 = f'''
                                GROUP BY pa."id_parcel", pa."cadastral_reference", pa."geom") parcial
                                JOIN (
                                    SELECT pa.id_parcel, pa.geom, pa.cadastral_reference, count(*) AS "Habitants"
                                    FROM "public"."census{Fitxer}" p
                                    JOIN "{nom_entitat}" pa
                                    ON p."cadastral_reference" = pa."cadastral_reference"
                                    GROUP BY pa."id_parcel", pa."cadastral_reference", pa."geom"
                                ) total
                                ON total."id_parcel" = parcial."id_parcel"
                                '''
                    
                    else:
                        sql1 = f'''
                                SELECT  parcial."id", parcial."geom", parcial."Habitants",
                                        total."Habitants" AS "hab_total",
                                        round((parcial."Habitants"::numeric/total."Habitants"::numeric)*100,2) AS "hab_rel",
                                        round(((parcial."Habitants"/(ST_Area(parcial."geom")/10^6))::numeric)::numeric,2) AS "densitat_9"
                                FROM (
                                    SELECT b.id, b.geom, sum(tot."Habitants") AS "Habitants"
                                    FROM "{nom_entitat}" b
                                    JOIN (
                                        SELECT  p."designator",
                                                count(*) AS "Habitants",
                                                d."geom"
                                        FROM "public"."census{Fitxer}" p
                                        JOIN "address{Fitxer}" d
                                        ON p."designator" = d."designator"
                                '''
                        sql2 = f'''
                                GROUP BY p."designator", d."geom") tot on ST_Intersects(tot."geom", b."geom")
                                GROUP BY b."id", b."geom") parcial
                                JOIN (
                                    SELECT b.id, b.geom, sum(tot."Habitants") AS "Habitants"
                                    FROM "{nom_entitat}" b
                                    JOIN (
                                        SELECT p."designator", count(*) AS "Habitants", d."geom"
                                        FROM "public"."census{Fitxer}" p
                                        JOIN "address{Fitxer}" d
                                        ON p."designator" = d."designator"
                                        GROUP BY p."designator", d."geom"
                                    ) tot
                                    ON ST_Intersects(tot."geom", b."geom")
                                    GROUP BY b."id", b."geom"
                                ) total
                                ON total."id" = parcial."id"
                                '''


                    csv = sql1 + where + sql2
                self.dlg.progressBar.setValue(65)
                try:
                    self.mostraSHPperPantalla(csv, Metode)
                    self.dlg.progressBar.setValue(90)
                    QApplication.processEvents()

                    self.dropFinal(cur, conn)
                except Exception as ex:
                    self.tornaConnectat()
                    print("Error modificar la TaulaResum 2")
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    QMessageBox.information(None, "Error", "No s'ha pogut modificar la TaulaResum de la base de dades.\nComprova els privilegis que tens.")
                    self.dlg.setEnabled(True)
                    self.dlg.progressBar.setVisible(False)
                    return
                        
            except Exception as ex:
                self.tornaConnectat()
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.lblEstatConn.setText('Error: Hi ha algun camp erroni.')
                print ("I am unable to connect to the database")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error a la connexio")
                self.dlg.setEnabled(True)
                self.dlg.progressBar.setVisible(False)
                return
            self.dlg.progressBar.setValue(100)
            QApplication.processEvents()
            self.tornaConnectat()
            self.dlg.setEnabled(True)
        
        else:
            QMessageBox.information(None, "Error", 'No hi ha cap connexió seleccionada.\nSeleccioneu una connexió.')
            print ("No hi ha cap filtre seleccionat.\nSeleccioneu un filtre.")
            self.dlg.setEnabled(True)
            self.dlg.progressBar.setVisible(False)

    def mostraSHPperPantalla(self, sql, capa):
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        global micolorTag
        global TEMPORARY_PATH
        uri = QgsDataSourceUri()
        try:
            #sql = "select * from \"ILLES\""
            uri.setConnection(host1,port1,nomBD1,usuari1,contra1)
            print ("Connectat")
            if capa == "ILLES":
                uri.setDataSource("","("+sql+")","geom","","id_zone")
            elif capa == "PARCELES":
                uri.setDataSource("","("+sql+")","geom","","id_parcel")
            else:
                uri.setDataSource("","("+sql+")","geom","","id")
            if (self.dlg.CB_Relatiu_total.isChecked() and (self.dlg.Cmb_Calcul.currentIndex() in [7,8,9,10,11,12,13,14])):
                titol3=capa + " " + self.dlg.Cmb_Calcul.currentText()[:len(self.dlg.Cmb_Calcul.currentText())-3] +" (% relatiu al total)"
            else:
                titol3=capa + " " + self.dlg.Cmb_Calcul.currentText()
            
            vlayer = QgsVectorLayer(uri.uri(False), titol3, "postgres")
            if self.dlg.Cmb_Calcul.currentIndex() in [7,8,9,10,11,12,13,14]: 
            
                alg={
                    'FIELD_LENGTH': 80,
                    'FIELD_NAME': 'Idx_total',
                    'FIELD_PRECISION': 1,
                    'FIELD_TYPE': 0,
                    'FORMULA': 'round("Index"/mean("Index")*100,1)',
                    'INPUT' : vlayer,
                    'NEW_FIELD': True,
                    'OUTPUT': 'memory:'
                }
                Layer_amb_total=processing.run('qgis:fieldcalculator', alg) #, feedback=f)
                vlayer=Layer_amb_total['OUTPUT']
            
            
            self.dlg.progressBar.setValue(70)
            QApplication.processEvents()
            
            if vlayer.isValid():
                self.dlg.progressBar.setValue(75)
                QApplication.processEvents()
                
                Area=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
                """Es crea un Shape a la carpeta temporal amb la data i hora actual"""
                #print(qgis.utils.Qgis.QGIS_VERSION_INT)
                if (qgis.utils.Qgis.QGIS_VERSION_INT>=31004):
                    save_options = QgsVectorFileWriter.SaveVectorOptions()
                    save_options.driverName = "ESRI Shapefile"
                    save_options.fileEncoding = "UTF-8"
                    transform_context = QgsProject.instance().transformContext()
                    error=QgsVectorFileWriter.writeAsVectorFormatV2(vlayer, TEMPORARY_PATH+"/Area_"+Area+".shp", transform_context,save_options)
                else:
                    error=QgsVectorFileWriter.writeAsVectorFormat(vlayer, TEMPORARY_PATH+"/Area_"+Area+".shp", "utf-8", vlayer.crs(), "ESRI Shapefile")
                vlayer=None
                """Es carrega el Shape a l'entorn del QGIS"""
                vlayer = QgsVectorLayer(TEMPORARY_PATH+"/Area_"+Area+".shp", titol3, "ogr")
                
                symbols = vlayer.renderer().symbols(QgsRenderContext())
                symbol=symbols[0]
                if self.dlg.RB_color.isChecked():
                    symbol.setColor(self.dlg.color.palette().color(1))
                    #opa = self.dlg.Transparencia.value()
                    #vlayer.setOpacity(0.5)
                    vlayer.setOpacity(self.dlg.Transparencia.value()/100)
                    self.dlg.progressBar.setValue(80)
                else:
                    #Edat
                    if self.dlg.Cmb_Calcul.currentIndex()==7: 
                        if self.dlg.CB_Relatiu_total.isChecked():
                            fieldname = "Idx_total"
                            template = "%1 - %2 %"
                        else:
                            fieldname = "Index"
                            template = "%1 - %2 anys"
                    #Envelliment,sobreenvelliment, recanvi, dependencia juvenil,dependencia senil,% poblacio estrangera
                    if self.dlg.Cmb_Calcul.currentIndex() in [8,9,10,11,12,13]: 
                        if self.dlg.CB_Relatiu_total.isChecked():
                            fieldname = "Idx_total"
                            template = "%1 - %2 %"
                        else:
                            fieldname="Index"
                            template = "%1 - %2 %"
                    #nens- dones fertils
                    if self.dlg.Cmb_Calcul.currentIndex()==14: 
                        if self.dlg.CB_Relatiu_total.isChecked():
                            fieldname = "Idx_total"
                            template = "%1 - %2 %"
                        else:
                            fieldname="Index"
                            template = "%1 - %2 ‰"
                    #habitants absoluts
                    if self.dlg.Cmb_Calcul.currentIndex()==2: 
                        fieldname="Habitants"
                        template = "%1 - %2 habitants"
                    #habitants relatius
                    if self.dlg.Cmb_Calcul.currentIndex()==3: 
                        fieldname="hab_rel"
                        template = "%1 - %2 %"
                    #densitat
                    if self.dlg.Cmb_Calcul.currentIndex()==4: 
                        fieldname="densitat_9"
                        template = "%1 - %2 habitants/km^2"
                    

                    numberOfClasses=int(float(self.dlg.LE_rang.text()))
                    myRangeList=[]
                    mysymbol=QgsFillSymbol()
                    if (self.dlg.ColorDegradat.currentText()=='Gris'):
                        colorRamp=QgsGradientColorRamp( QColor( 230, 230, 230 ), QColor( 60, 60, 60 ))
                    elif (self.dlg.ColorDegradat.currentText()=='Vermell'):
                        colorRamp=QgsGradientColorRamp( QColor( 255, 154, 154 ), QColor( 154, 0, 0 ))
                    elif (self.dlg.ColorDegradat.currentText()=='Groc'):
                        colorRamp=QgsGradientColorRamp( QColor( 255, 255, 154 ), QColor( 154, 154, 0 ))
                    elif (self.dlg.ColorDegradat.currentText()=='Blau'):
                        colorRamp=QgsGradientColorRamp( QColor( 154, 255, 255 ), QColor( 0, 0, 154 ))
                    elif (self.dlg.ColorDegradat.currentText()=='Verd'):
                        colorRamp=QgsGradientColorRamp( QColor( 154, 255, 154 ), QColor( 0, 154, 0 ))
                    
                    format = QgsRendererRangeLabelFormat()
                    
                    precision = 2
                    format.setFormat(template)
                    format.setPrecision(precision)
                    format.setTrimTrailingZeroes(False)
                    if (self.dlg.combo_Tipus.currentText()=='Quantil'):
                        renderer=QgsGraduatedSymbolRenderer.createRenderer(vlayer,fieldname,numberOfClasses,QgsGraduatedSymbolRenderer.Quantile,mysymbol,colorRamp)
                    elif (self.dlg.combo_Tipus.currentText()=='Interval igual'):
                        renderer=QgsGraduatedSymbolRenderer.createRenderer(vlayer,fieldname,numberOfClasses,QgsGraduatedSymbolRenderer.EqualInterval,mysymbol,colorRamp)
                    elif (self.dlg.combo_Tipus.currentText()=='Ruptures naturals'):
                        renderer=QgsGraduatedSymbolRenderer.createRenderer(vlayer,fieldname,numberOfClasses,QgsGraduatedSymbolRenderer.Jenks,mysymbol,colorRamp)
                    elif (self.dlg.combo_Tipus.currentText()=='Desviació estandard'):
                        renderer=QgsGraduatedSymbolRenderer.createRenderer(vlayer,fieldname,numberOfClasses,QgsGraduatedSymbolRenderer.StdDev,mysymbol,colorRamp)
                    elif (self.dlg.combo_Tipus.currentText()=='Pretty breaks'):
                        renderer=QgsGraduatedSymbolRenderer.createRenderer(vlayer,fieldname,numberOfClasses,QgsGraduatedSymbolRenderer.Pretty,mysymbol,colorRamp)
                    renderer.setLabelFormat(format,True)
                    vlayer.setOpacity(self.dlg.Transparencia.value()/100)
                    vlayer.setRenderer(renderer)
                    self.dlg.progressBar.setValue(80)
                    QApplication.processEvents()
                
                if self.dlg.CB_etiquetes.isChecked():
                    layer_settings  = QgsPalLayerSettings()
                    text_format = QgsTextFormat()
                
                    text_format.setFont(QFont("Arial", self.dlg.mida.value()))
                    text_format.setSize(self.dlg.mida.value())
                    """
                    buffer_settings = QgsTextBufferSettings()
                    buffer_settings.setEnabled(True)
                    buffer_settings.setSize(0.10)
                    buffer_settings.setColor(QColor("black"))
                    
                    text_format.setBuffer(buffer_settings)
                    """
                    text_format.setColor(QColor.fromRgb(micolorTag.red(),micolorTag.green(),micolorTag.blue()))
                    layer_settings.setFormat(text_format)

                    #Edat
                    if self.dlg.Cmb_Calcul.currentIndex()==7: 
                        if self.dlg.CB_Relatiu_total.isChecked():
                            layer_settings.fieldName = "Idx_total"
                        else:
                            layer_settings.fieldName = "Index"
                    #Envelliment,sobreenvelliment, recanvi, dependencia juvenil,dependencia senil,% poblacio estrangera
                    if self.dlg.Cmb_Calcul.currentIndex() in [8,9,10,11,12,13]: 
                        if self.dlg.CB_Relatiu_total.isChecked():
                            layer_settings.isExpression=True
                            layer_settings.fieldName = "to_string(Idx_total) + ' %'"
                        else:
                            layer_settings.isExpression=True
                            layer_settings.fieldName = "to_string(Index) + ' %'"
                    #nens- dones fertils
                    if self.dlg.Cmb_Calcul.currentIndex()==14: 
                        if self.dlg.CB_Relatiu_total.isChecked():
                            layer_settings.isExpression=True
                            layer_settings.fieldName = "to_string(Idx_total) + ' %'"
                        else:
                            layer_settings.isExpression=True
                            layer_settings.fieldName = "to_string(Index) + ' ‰'"
                    #habitants absoluts
                    if self.dlg.Cmb_Calcul.currentIndex()==2: 
                        layer_settings.fieldName = "Habitants"
                    #habitants relatius
                    if self.dlg.Cmb_Calcul.currentIndex()==3: 
                        layer_settings.isExpression=True
                        layer_settings.fieldName = "to_string(hab_rel) + ' %'"
                    #densitat
                    if self.dlg.Cmb_Calcul.currentIndex()==4: 
                        layer_settings.isExpression=True
                        layer_settings.fieldName = "to_string(densitat_9)+ ' hab/km^2'"

                        #vlayer.setCustomProperty("labeling/isExpression", True)
                        #vlayer.setCustomProperty("labeling/fieldName", "to_string(densitat_9)+ ' hab/km^2'")
                    QApplication.processEvents()

                    layer_settings.placement = QgsPalLayerSettings.OverPoint
                    layer_settings.scaleVisibility=True
                    layer_settings.minimumScale=float(self.dlg.max.value())
                    layer_settings.maximumScale=float(self.dlg.min.value())
                    layer_settings.enabled = True
                
                    settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    vlayer.setLabelsEnabled(True)
                    vlayer.setLabeling(settings)
                    vlayer.setScaleBasedVisibility(True)

                    vlayer.triggerRepaint()                    
                    """
                    vlayer.setCustomProperty("labeling", "pal")
                    vlayer.setCustomProperty("labeling/enabled", "true")
                    vlayer.setCustomProperty("labeling/fontFamily", "Arial")
                    vlayer.setCustomProperty("labeling/fontSize", self.dlg.mida.value())
                    vlayer.setCustomProperty("labeling/scaleMin",self.dlg.min.value())
                    vlayer.setCustomProperty("labeling/scaleMax", self.dlg.max.value())
                    vlayer.setCustomProperty("labeling/textColorR", micolorTag.red())
                    vlayer.setCustomProperty("labeling/textColorG", micolorTag.green())
                    vlayer.setCustomProperty("labeling/textColorB", micolorTag.blue())
                    if self.dlg.RB_absoluts.isChecked():
                        vlayer.setCustomProperty("labeling/fieldName", "Habitants")
                    elif self.dlg.RB_relatius.isChecked():
                        vlayer.setCustomProperty("labeling/isExpression", True)
                        vlayer.setCustomProperty("labeling/fieldName", "to_string( hab_rel) + '%'")
                        QApplication.processEvents()
                    else:
                        vlayer.setCustomProperty("labeling/isExpression", True)
                        vlayer.setCustomProperty("labeling/fieldName", "to_string(densitat_9)+ ' hab/km^2'")
                    vlayer.setCustomProperty("labeling/placement", "1")
                    vlayer.triggerRepaint()
                    """
                    
                self.dlg.progressBar.setValue(85)
                QApplication.processEvents()
                QgsProject.instance().addMapLayer(vlayer,False)    
                root = QgsProject.instance().layerTreeRoot()
                myLayerNode=QgsLayerTreeLayer(vlayer)
                root.insertChildNode(0,myLayerNode)
                myLayerNode.setCustomProperty("showFeatureCount", True)
                iface.mapCanvas().refresh()
                #qgis.utils.iface.legendInterface().refreshLayerSymbology(vlayer)
            else:
                print("Error vector layer")
            QApplication.processEvents()
        except Exception as ex:
            print ("Error a la connexio")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "No s'ha pogut modificar la TaulaResum de la base de dades.\nComprova els privilegis que tens.")
            
    
    def tornaConnectat(self):
        '''
        Posa a l'etiqueta que indica les connexions
        '''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
        self.dlg.lblEstatConn.setText('Connectat')
        self.dlg.progressBar.setValue(0)
        self.dlg.progressBar.setVisible(False)
        QApplication.processEvents()
    
    def on_click_btoData(self, enabled):
        '''
        Activa o descativa el calendari per escollir una data.
        '''
        if enabled:
            self.dlg.data.setEnabled(True)
        else:
            self.dlg.data.setEnabled(False)      
             
    def detect_database_version(self, cur, conn):
        global versio_db

        try:
            cur.execute("SELECT taula FROM config WHERE variable = 'versio';")
            versio_db = cur.fetchone()[0]
            print ("Versió de la base de dades: " + versio_db)
        except Exception as ex:
            print ("Error detect_database_version")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a la connexio")
            self.dlg.setEnabled(True)
            self.dlg.progressBar.setVisible(False)
            return
        
        if versio_db == '1.0':
            try:
                cur.execute("SELECT taula FROM config WHERE variable = 'parceles';")
                parcel_name = cur.fetchone()[0]

                cur.execute("SELECT taula FROM config WHERE variable = 'illes';")
                illes_name = cur.fetchone()[0]

                cur.execute("SELECT taula FROM config WHERE variable = 'portals';")
                portals_name = cur.fetchone()[0]

                cur.execute("SELECT taula FROM config WHERE variable = 'padro';")
                padro_name = cur.fetchone()[0]

                cur.execute("SELECT taula FROM config WHERE variable = 'paisos';")
                paisos_name = cur.fetchone()[0]
            except Exception as ex:
                print ("Error detect_database_version")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error a la connexio")
                self.dlg.setEnabled(True)
                self.dlg.progressBar.setVisible(False)
                return
            
            try:
                cur.execute(f"""
                            DROP TABLE IF EXISTS parcel_temp{Fitxer};
                            CREATE TABLE parcel_temp{Fitxer} (
                                id_parcel,
                                geom,
                                cadastral_reference
                            ) AS select "id", "geom", "utm_total" FROM "{parcel_name}";
                            """)
                conn.commit()
                cur.execute(f"""
                            DROP TABLE IF EXISTS zone{Fitxer};
                            CREATE TABLE zone{Fitxer} (
                                id_zone,
                                geom,
                                cadastral_zoning_reference
                            ) AS select "id", "geom", "D_S_I" FROM "{illes_name}";
                            """)
                conn.commit()
                cur.execute(f"""
                            DROP TABLE IF EXISTS address{Fitxer};
                            CREATE TABLE address{Fitxer} (
                                id_address,
                                geom,
                                cadastral_reference,
                                designator
                            ) AS select "id", "geom", "REF_CADAST", "Carrer_Num_Bis" FROM "{portals_name}";
                            """)
                conn.commit()
                cur.execute(f"""
                            DROP TABLE IF EXISTS census{Fitxer};
                            CREATE TABLE census{Fitxer} (
                                id_census,
                                cadastral_reference,
                                cadastral_zoning_reference,
                                origin_code,
                                date_of_birth,
                                sex,
                                nation_code,
                                studies_code,
                                studies,
                                previous_place_code,
                                previous_place_name,
                                designator
                            ) AS SELECT 
                                "id", 
                                "REFCAD", 
                                "D_S_I", 
                                "HABCOPANA", 
                                "HABFECNAC", 
                                "HABELSEXO", 
                                "HABNACION", 
                                "HABNIVINS", 
                                "NINDESCRI", 
                                "HABCOMUNA", 
                                "HABNOMUNA", 
                                "CarrerNumBis" 
                            FROM "{padro_name}";
                            """)
                conn.commit()
                cur.execute(f"""
                            DROP TABLE IF EXISTS country{Fitxer};
                            CREATE TABLE country{Fitxer} (
                                id,
                                country_code,
                                country_name,
                                continent,
                                continent_zone,
                                ue27
                            ) AS SELECT "id", "CONCODPAI", "CONNOMPAI", "CONNOMCON", "CONZONCON", "UE27" FROM "{paisos_name}";
                            """)
                conn.commit()
            except Exception as ex:
                print ("Error detect_database_version fent taules temporals versio 1")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error a la connexio")
                self.dlg.setEnabled(True)
                self.dlg.progressBar.setVisible(False)
                return
        else:
            try:
                cur.execute(f"""DROP TABLE IF EXISTS parcel_temp{Fitxer};
                            CREATE TABLE parcel_temp{Fitxer} AS SELECT * FROM parcel;""")
                conn.commit()
            except Exception as ex:
                print ("Error detect_database_version fent taules temporals versio 2")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error a la connexio")
                self.dlg.setEnabled(True)
                self.dlg.progressBar.setVisible(False)
                return
            
    def dropFinal(self, cur, conn):
        global versio_db

        if self.dlg.tabWidget.currentIndex() == 1:
            self.DropTempTable(cur, conn, 'layerexportat')
        self.DropTempTable(cur, conn, f'parcel_temp{Fitxer}')
        if versio_db == '1.0':
            self.DropTempTable(cur, conn, f'zone{Fitxer}')
            self.DropTempTable(cur, conn, f'address{Fitxer}')
            self.DropTempTable(cur, conn, f'census{Fitxer}')
            self.DropTempTable(cur, conn, f'country{Fitxer}')

        if versio_db == '1.0':
            try:
                cur.execute(f"DROP TABLE IF EXISTS zone{Fitxer};")
                conn.commit()
                cur.execute(f"DROP TABLE IF EXISTS address{Fitxer};")
                conn.commit()
                cur.execute(f"DROP TABLE IF EXISTS census{Fitxer};")
                conn.commit()
                cur.execute(f"DROP TABLE IF EXISTS country{Fitxer};")
                conn.commit()
            except:
                print ("Error dropFinal")
                QMessageBox.information(None, "Error", "Error a la connexio")
                self.dlg.setEnabled(True)
                self.dlg.progressBar.setVisible(False)
                return
        try:
            cur.execute(f"DROP TABLE IF EXISTS parcel_temp{Fitxer};")
            conn.commit()
        except:
            print ("Error dropFinal")
            QMessageBox.information(None, "Error", "Error a la connexio")
            self.dlg.setEnabled(True)
            self.dlg.progressBar.setVisible(False)
            return
    
    def populateComboBox_tooltip(self,combo,list,tooltip,predef,sort):
        '''
        procedure to fill specified combobox with provided list
        '''
        combo.blockSignals (True)
        combo.clear()
        model=QStandardItemModel(combo)
        predefInList = None
        for index,elem in enumerate(list):
            item = QStandardItem(str(elem))
            item.setToolTip(tooltip[index])
            model.appendRow(item)
            if elem == predef:
                predefInList = elem

        if sort:
            model.sort(0)
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0,predef)
                combo.setCurrentIndex(0)
        combo.blockSignals (False)

    def populateComboBox(self,combo,list,predef,sort):
        '''
        procedure to fill specified combobox with provided list
        '''
        combo.blockSignals (True)
        combo.clear()
        model=QStandardItemModel(combo)
        predefInList = None
        for elem in list:
            item = QStandardItem(str(elem))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        if sort:
            model.sort(0)
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0,predef)
                combo.setCurrentIndex(0)
        combo.blockSignals (False)

    def Retorna_Indicador(self,where,Entitat,Metode):
        # ILLES
        if Metode=="ILLES":
            
            # INICI PART IGUAL EN TOTS LLEVAT DEL PRIMER (I_edat)
            sql1 = f'''
                    SELECT  numerador.id_zone, numerador.geom, numerador.cadastral_zoning_reference, numerador."Habitants",
                            round((numerador."Habitants"::numeric/denominador."Habitants"::numeric)*100,1) AS "Index"
                    FROM (
                        SELECT i.id_zone, i.geom, i.cadastral_zoning_reference, count(*) AS "Habitants"
                        FROM "public"."census{Fitxer}" p
                        JOIN "{Entitat}" i
                        ON p."cadastral_zoning_reference" = i."cadastral_zoning_reference"
                    '''
            sql2 = f'''
                        GROUP BY i."cadastral_zoning_reference", i."id_zone", i."geom"
                    ) numerador
                    JOIN (
                        SELECT i.id_zone, i.geom, count(*) AS "Habitants"
                        FROM "public"."census{Fitxer}" p
                        JOIN "{Entitat}" i
                        ON p."cadastral_zoning_reference" = i."cadastral_zoning_reference"
                    '''
            sql3 = f'''
                        GROUP BY i."cadastral_zoning_reference", i."id_zone", i."geom"
                    ) denominador
                    ON denominador."id_zone" = numerador."id_zone"
                    '''
            # FI PART IGUAL EN TOTS LLEVAT DEL PRIMER (I_edat)
            
            #Edat
            if self.dlg.Cmb_Calcul.currentIndex()==7: 
                sql1 = f'''
                        SELECT  numerador.id_zone, numerador.geom, numerador.cadastral_zoning_reference, numerador."Habitants",
                                round((numerador."Edat"::numeric/numerador."Habitants"::numeric),1) AS "Index"
                        FROM (
                            SELECT i.id_zone, i.geom, i.cadastral_zoning_reference, count(*) AS "Habitants",sum(extract(year FROM age(current_date,"date_of_birth"))) AS "Edat"
                            FROM "public"."census{Fitxer}" p
                            JOIN "{Entitat}" i
                            ON p."cadastral_zoning_reference" = i."cadastral_zoning_reference"
                        '''
                sql2 = f'''
                            GROUP BY i."cadastral_zoning_reference", i."id_zone", i."geom"
                        ) numerador
                        '''
                csv = sql1 + where + sql2
            else:
                csv=self.Where_Indicadors(sql1,sql2,sql3,where)
            #print (csv)
        
        # PARCELES
        elif Metode=="PARCELES":
            # INICI PART IGUAL EN TOTS LLEVAT DEL PRIMER (I_edat)
            sql1 = f'''
                    SELECT  numerador.id_parcel, numerador.geom, numerador.cadastral_reference, numerador."Habitants",
                            round((numerador."Habitants"::numeric/denominador."Habitants"::numeric)*100,1) AS "Index"
                    FROM (
                        SELECT pa.id_parcel, pa.geom, pa.cadastral_reference, count(*) AS "Habitants"
                        FROM "public"."census{Fitxer}" p
                        JOIN "{Entitat}" pa
                        ON p."cadastral_reference" = pa."cadastral_reference"
                    '''
            sql2 = f'''
                        GROUP BY pa."id_parcel", pa."cadastral_reference", pa."geom"
                    ) numerador
                    JOIN (
                        SELECT pa.id_parcel, pa.geom, pa.cadastral_reference, count(*) AS "Habitants"
                        FROM "public"."census{Fitxer}" p
                        JOIN "{Entitat}" pa
                        ON p."cadastral_reference" = pa."cadastral_reference"
                    '''
            sql3 = f'''
                        GROUP BY pa."id_parcel", pa."cadastral_reference", pa."geom"
                    ) denominador
                    ON denominador."id_parcel" = numerador."id_parcel"
                    '''
            # FI PART IGUAL EN TOTS LLEVAT DEL PRIMER (I_edat)
        
            #Edat
            if self.dlg.Cmb_Calcul.currentIndex()==7: 
                sql1 = f'''
                        SELECT  numerador.id_parcel, numerador.geom, numerador.cadastral_reference, numerador."Habitants", numerador."Edat",
                                round((numerador."Edat"::numeric/numerador."Habitants"::numeric),1) AS "Index"
                        FROM (
                            SELECT pa.id_parcel, pa.geom, pa.cadastral_reference, count(*) AS "Habitants",sum(extract(year FROM age(current_date,"date_of_birth"))) AS "Edat"
                            FROM "public"."census{Fitxer}" p
                            JOIN "{Entitat}" pa
                            ON p."cadastral_reference" = pa."cadastral_reference"
                        '''
                sql2 = f'''
                            GROUP BY pa."id_parcel", pa."cadastral_reference", pa."geom"
                        ) numerador
                        '''
                csv = sql1 + where + sql2
            else:
                csv=self.Where_Indicadors(sql1,sql2,sql3,where)
        
        # SECCIONS
        else: # (Metode=="SECCIONS" or Metode=="BARRIS" or Metode=="DISTRICTES POSTALS" or Metode=="DISTRICTES INE" or Metode=="SECTORS") or Metode == LLEGENDA:
            # INICI PART IGUAL EN TOTS LLEVAT DEL PRIMER (I_edat)
            sql1 = f'''
                    SELECT  numerador.id, numerador.geom, numerador."Habitants", numerador."Edat",
                            round((numerador."Habitants"::numeric/denominador."Habitants"::numeric)*100,1) AS "Index"
                    FROM (
                        SELECT b.id, b.geom, sum(tot."Habitants") AS "Habitants", sum(tot."Edat") AS "Edat"
                        FROM {Entitat} b
                        JOIN (
                            SELECT p."designator", d."geom", count(*) AS "Habitants", sum(extract(year FROM age(current_date,"date_of_birth"))) AS "Edat"
                            FROM "public"."census{Fitxer}" p
                            JOIN "address{Fitxer}" d
                            ON p."designator" = d."designator"
                    '''
            sql2 = f'''
                            GROUP BY p."designator", d."geom"
                        ) tot
                        ON ST_Intersects(tot."geom", b."geom")
                        GROUP BY b."id", b."geom"
                    ) numerador
                    JOIN (
                        SELECT b.id, b.geom, sum(tot."Habitants") AS "Habitants", sum(tot."Edat") AS "Edat"
                        FROM {Entitat} b
                        JOIN (
                            SELECT p."designator", d."geom", count(*) AS "Habitants", sum(extract(year FROM age(current_date,"date_of_birth"))) AS "Edat"
                            FROM "public"."census{Fitxer}" p
                            JOIN "address{Fitxer}" d
                            ON p."designator" = d."designator"
                    '''
            sql3 = f'''
                            GROUP BY p."designator", d."geom"
                        ) tot
                    ON ST_Intersects(tot."geom", b."geom")
                    GROUP BY b."id", b."geom"
                    ) denominador
                    ON denominador."id" = numerador."id"
                    '''
            # FI PART IGUAL EN TOTS LLEVAT DEL PRIMER (I_edat)
            
            #Edat
            if self.dlg.Cmb_Calcul.currentIndex()==7: 
                sql1 = f'''
                        SELECT  numerador.id, numerador.geom, numerador."Habitants", numerador."Edat",
                                round((numerador."Edat"::numeric/numerador."Habitants"::numeric),1) AS "Index"
                        FROM (
                            SELECT  b.id, b.geom,
                                    sum(tot."Habitants") AS "Habitants", 
                                    sum(tot."Edat") AS "Edat"
                            FROM {Entitat} b
                            JOIN (
                                SELECT  p."designator",
                                        d."geom",
                                        count(*) AS "Habitants",
                                        sum(extract(year FROM age(current_date,"date_of_birth"))) AS "Edat"
                                FROM "public"."census{Fitxer}" p
                                JOIN "address{Fitxer}" d
                                ON p."designator" = d."designator"
                        '''
                sql2 = f'''
                                GROUP BY p."designator", d."geom"
                            ) tot
                            ON ST_Intersects(tot."geom", b."geom")
                            GROUP BY b."id", b."geom"
                        ) numerador
                        '''
                csv = sql1 + where + sql2
            else:
                csv=self.Where_Indicadors(sql1,sql2,sql3,where)
        
        return csv

    def Where_Indicadors(self,sql1,sql2,sql3,where):
        

        if self.dlg.Cmb_Calcul.currentIndex()==8:
            sql_where1 = where +' AND (extract(year from age(current_date,"date_of_birth"))>=65)\n'
            sql_where2 = where + ' AND (extract(year from age(current_date,"date_of_birth"))<=15)\n'
            csv = sql1 + sql_where1 + sql2 + sql_where2 + sql3
        elif self.dlg.Cmb_Calcul.currentIndex()==9:
            sql_where1 = where +' AND (extract(year from age(current_date,"date_of_birth"))>=85)\n'
            sql_where2 = where + ' AND (extract(year from age(current_date,"date_of_birth"))<=65)\n'
            csv = sql1 + sql_where1 + sql2 + sql_where2 + sql3
        elif self.dlg.Cmb_Calcul.currentIndex()==10:
            sql_where1 = where +' AND (extract(year from age(current_date,"date_of_birth"))>=60 and extract(year from age(current_date,"date_of_birth"))<=64)\n'
            sql_where2 = where + ' AND (extract(year from age(current_date,"date_of_birth"))>=15 and extract(year from age(current_date,"date_of_birth"))<=19)\n'
            csv = sql1 + sql_where1 + sql2 + sql_where2 + sql3
        elif self.dlg.Cmb_Calcul.currentIndex()==11:
            sql_where1 = where +' AND (extract(year from age(current_date,"date_of_birth"))<=15)\n'
            sql_where2 = where + ' AND (extract(year from age(current_date,"date_of_birth"))>=16 and extract(year from age(current_date,"date_of_birth"))<=64)\n'
            csv = sql1 + sql_where1 + sql2 + sql_where2 + sql3
        elif self.dlg.Cmb_Calcul.currentIndex()==12:
            sql_where1 = where +' AND (extract(year from age(current_date,"date_of_birth"))>=65)\n'
            sql_where2 = where + ' AND (extract(year from age(current_date,"date_of_birth"))>=16 and extract(year from age(current_date,"date_of_birth"))<=64)\n'
            csv = sql1 + sql_where1 + sql2 + sql_where2 + sql3
        elif self.dlg.Cmb_Calcul.currentIndex()==13:
            sql_where1 = where +' AND ("origin_code"<>\'108\')\n'
            sql_where2 = where + '\n'
            csv = sql1 + sql_where1 + sql2 + sql_where2 + sql3
        elif self.dlg.Cmb_Calcul.currentIndex()==14:
            sql_where1 = where +' AND (extract(year from age(current_date,"date_of_birth"))<=14)\n'
            sql_where2 = where + ' AND (extract(year from age(current_date,"date_of_birth"))>=15 and extract(year from age(current_date,"date_of_birth"))<=49 and "sex"=\'6\')\n'
            csv = sql1 + sql_where1 + sql2 + sql_where2 + sql3
        else:
            csv="error"
        return csv

    def DropTemporalTables(self):
        '''
        Aquesta funció s'encarrega d'eliminar les taules temporals no esborrades
        '''     
        self.DropTempTable("TAULA_FINAL_")
        self.DropTempTable("ZI_Total_Combi_")
        self.DropTempTable("graf_utilitzat_")
        self.DropTempTable("JoinIlles_Habitants_Temp_")
        if versio_db == '1.0':
            self.DropTempTable(f"zone{Fitxer}")
            self.DropTempTable(f"address{Fitxer}")
            self.DropTempTable("stretch")
            self.DropTempTable("stretch_vertices_pgr")
    
    def DropTempTable(self, cur, conn, taula):
        '''
        Aquesta funció s'encarrega de construir els sqls necessaris per eliminar les taules temporals no esborrades
        '''     
        SQLDrop="SELECT CONCAT('DROP TABLE IF EXISTS \"', TABLE_SCHEMA, '\".""\"', TABLE_NAME, '\""";') FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE '"+taula+"%' AND TABLE_SCHEMA = 'public';"
        try:
            cur.execute(SQLDrop)
            llista = cur.fetchall()
            for elem in llista:
                try:
                    cur.execute(elem[0])
                except Exception as ex:  
                    self.dlg.setEnabled(True)          
                    msg_error="Error en la sentencia SQL següent:\n"+elem[0]
                    print(msg_error)
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    QMessageBox.information(None, "Error", msg_error)
            conn.commit()
        except Exception as ex:
            self.dlg.setEnabled(True)
            msg_error="Error en la sentencia SQL següent:\n"+SQLDrop
            print(msg_error)
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", msg_error)    
    
    def getConnections(self):
        '''
        Aquesta funcio retorna les connexions que estan guardades en el projecte.
        '''
        s = QSettings() 
        s.beginGroup("PostgreSQL/connections")
        currentConnections = s.childGroups()
        s.endGroup()
        return currentConnections
    
    def initGui(self):
        '''
        Create the menu entries and toolbar icons inside the QGIS GUI.
        '''
        
        icon_path = ':/plugins/MapesDescriptiusPoblacio/icon.png'
        self.add_action(
            icon_path,
            text=self.tr('Mapes Descriptius de Població'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        '''
        Removes the plugin menu item and icon from QGIS GUI.
        '''
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr('&CCU'),
                action)
            #self.iface.removeToolBarIcon(action)
            self.toolbar.removeAction(action)
        # remove the toolbar
        #del self.toolbar


    def run(self):
        global Fitxer
        global Llista_Camps_Metodes
        '''
        Run method that performs all the real work
        '''
        conn=self.getConnections()
        self.EstatInicial()
        # show the dialog
        self.dlg.show()
        
        self.populateComboBox(self.dlg.comboConnexions ,conn,'Selecciona connexió',True)
        # Run the dialog event loop
        Fitxer=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
        Llista_Camps_Metodes=[f"zone{Fitxer}",f"parcel_temp{Fitxer}","seccions","barris","districtes_postals","districtes","sectors"]
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass